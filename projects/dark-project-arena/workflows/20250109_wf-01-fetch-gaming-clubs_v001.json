{
  "name": "WF-01 Fetch Gaming Clubs",
  "nodes": [
    {
      "id": "exec-trigger-001",
      "name": "When Executed by Another Workflow",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [260, 200],
      "parameters": {
        "inputSource": "passthrough"
      }
    },
    {
      "id": "manual-trigger-001",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [260, 300],
      "parameters": {}
    },
    {
      "id": "schedule-trigger-001",
      "name": "Daily Schedule",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [260, 500],
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "custom",
              "cronExpression": "0 3 * * *"
            }
          ]
        }
      }
    },
    {
      "id": "set-search-params-001",
      "name": "Set Search Parameters",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [500, 400],
      "parameters": {
        "values": {
          "string": [
            {
              "name": "searchQuery",
              "value": "компьютерный клуб киберспорт"
            }
          ],
          "number": [
            {
              "name": "cityIndex",
              "value": 0
            }
          ]
        },
        "options": {}
      }
    },
    {
      "id": "cities-data-001",
      "name": "Cities Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [700, 400],
      "parameters": {
        "functionCode": "// If executed by orchestrator, a city object should be present on input\nif ($json.city) {\n  return [{ json: {\n    city: $json.city,\n    region: $json.region || '',\n    searchQuery: $json.searchQuery || $json.query || 'компьютерный клуб киберспорт'\n  }}];\n}\n\n// Fallback manual list for ad-hoc runs\nconst cities = [\n  {city: 'Москва', region: 'Московская область'},\n  {city: 'Санкт-Петербург', region: 'Ленинградская область'},\n  {city: 'Новосибирск', region: 'Новосибирская область'}\n];\n\nconst cityIndex = $json.cityIndex || 0;\nif (cityIndex < cities.length) {\n  return [{ json: {\n    ...cities[cityIndex],\n    searchQuery: $json.searchQuery,\n    cityIndex,\n    totalCities: cities.length,\n    hasMore: cityIndex < cities.length - 1\n  }}];\n}\nreturn [{ json: { completed: true, totalProcessed: cities.length } }];"
      }
    },
    {
      "id": "check-completed-001",
      "name": "Check if Completed",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [900, 400],
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.completed}}",
              "value2": true
            }
          ]
        }
      }
    },
    {
      "id": "set-2gis-page-001",
      "name": "Set 2GIS Page",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [1000, 480],
      "parameters": {
        "values": {
          "number": [
            { "name": "page", "value": "={{ $json.page || 1 }}" },
            { "name": "page_size", "value": 50 }
          ]
        }
      }
    },
    {
      "id": "http-yandex-001",
      "name": "Fetch Yandex Maps",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1100, 300],
      "parameters": {
        "method": "GET",
        "url": "https://search-maps.yandex.ru/v1/",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "text",
              "value": "={{ $json.searchQuery + ' ' + $json.city }}"
            },
            {
              "name": "type",
              "value": "biz"
            },
            {
              "name": "lang",
              "value": "ru_RU"
            },
            {
              "name": "results",
              "value": "500"
            },
            {
              "name": "apikey",
              "value": "={{ $env.YANDEX_MAPS_API_KEY }}"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "credentials": {
        "httpHeaderAuth": {
          "id": "YANDEX_MAPS_API",
          "name": "Yandex Maps API"
        }
      },
      "continueOnFail": true
    },
    {
      "id": "http-2gis-001", 
      "name": "Fetch 2GIS",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1100, 500],
      "parameters": {
        "method": "GET",
        "url": "https://catalog.api.2gis.com/3.0/items",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "={{$json.searchQuery}}"
            },
            {
              "name": "type",
              "value": "branch"
            },
            {
              "name": "page_size",
              "value": "50"
            },
            {
              "name": "page",
              "value": "={{ $json.page || 1 }}"
            },
            {
              "name": "fields",
              "value": "items.contact_groups,items.point,items.address_name,items.org"
            },
            {
              "name": "key",
              "value": "={{ $env.TWOGIS_API_KEY }}"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "credentials": {
        "httpHeaderAuth": {
          "id": "2GIS_API",
          "name": "2GIS API"
        }
      },
      "continueOnFail": true
    },
    {
      "id": "2gis-paging-001",
      "name": "Compute 2GIS Paging",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1300, 520],
      "parameters": {
        "functionCode": "const page = $json.page || 1;\nconst pageSize = $json.page_size || 50;\nconst total = ($node['Fetch 2GIS'].json && $node['Fetch 2GIS'].json.result && $node['Fetch 2GIS'].json.result.total) ? $node['Fetch 2GIS'].json.result.total : 0;\nconst hasMore = page * pageSize < total;\nreturn [{ json: { page, nextPage: page + 1, pageSize, total, hasMore } }];"
      }
    },
    {
      "id": "if-2gis-hasmore-001",
      "name": "2GIS Has More?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1500, 520],
      "parameters": {
        "conditions": { "boolean": [ { "value1": "={{ $json.hasMore }}", "value2": true } ] }
      }
    },
    {
      "id": "parse-process-001",
      "name": "Parse and Process Results",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1300, 400],
      "parameters": {
        "functionCode": "const cityData = $node[\"Cities Data\"].json;\nconst yandexData = $node[\"Fetch Yandex Maps\"].json;\nconst twoGisData = $node[\"Fetch 2GIS\"].json;\nconst clubs = [];\n\n// Parse Yandex results\nif (yandexData.features && Array.isArray(yandexData.features)) {\n  for (const feature of yandexData.features) {\n    const props = feature.properties || {};\n    const meta = props.CompanyMetaData || {};\n    const phones = (meta.Phones || []).map(p => p.formatted).filter(Boolean);\n    \n    clubs.push({\n      name: props.name || '',\n      address: props.address?.formatted || '',\n      phone: phones[0] || '',\n      additionalPhones: phones.slice(1),\n      city: cityData.city,\n      region: cityData.region,\n      source: 'YandexMaps',\n      coordinates: {\n        lat: feature.geometry?.coordinates?.[1] || 0,\n        lon: feature.geometry?.coordinates?.[0] || 0\n      },\n      url: meta.url || '',\n      workingHours: meta.Hours?.text || '',\n      categories: (meta.Categories || []).map(c => c.name).join(', '),\n      foundAt: new Date().toISOString()\n    });\n  }\n}\n\n// Parse 2GIS results\nif (twoGisData.result?.items && Array.isArray(twoGisData.result.items)) {\n  for (const item of twoGisData.result.items) {\n    const contacts = {};\n    \n    // Extract contacts\n    for (const group of (item.contact_groups || [])) {\n      for (const contact of (group.contacts || [])) {\n        if (!contacts[contact.type]) {\n          contacts[contact.type] = [];\n        }\n        contacts[contact.type].push(contact.value);\n      }\n    }\n    \n    clubs.push({\n      name: item.name || '',\n      address: item.address_name || '',\n      phone: (contacts.phone || [])[0] || '',\n      additionalPhones: (contacts.phone || []).slice(1),\n      email: (contacts.email || [])[0] || '',\n      city: cityData.city,\n      region: cityData.region,\n      source: '2GIS',\n      isChain: (item.org?.branch_count || 0) > 1,\n      brand: item.org?.name || '',\n      branchCount: item.org?.branch_count || 1,\n      coordinates: {\n        lat: item.point?.lat || 0,\n        lon: item.point?.lon || 0\n      },\n      url: (contacts.website || [])[0] || '',\n      telegram: (contacts.telegram || [])[0] || '',\n      rubrics: (item.rubrics || []).map(r => r.name).join(', '),\n      foundAt: new Date().toISOString()\n    });\n  }\n}\n\n// Deduplicate\nconst uniqueClubs = [];\nconst seen = new Set();\n\nfor (const club of clubs) {\n  if (club.name && club.address) {\n    const key = `${club.name.toLowerCase().trim()}_${club.address.toLowerCase().trim()}`;\n    if (!seen.has(key)) {\n      seen.add(key);\n      uniqueClubs.push(club);\n    }\n  }\n}\n\n// Return clubs for Redis save\nreturn uniqueClubs.map(club => ({\n  json: {\n    key: `club:${cityData.city.replace(/\\s+/g, '_')}:${club.name.replace(/[^a-zA-Z0-9А-Яа-я]/g, '_')}`,\n    value: JSON.stringify(club),\n    ttl: 30 * 24 * 60 * 60,\n    club: club,\n    cityData: cityData\n  }\n}));"
      }
    },
    {
      "id": "redis-save-001",
      "name": "Save to Redis",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [1500, 400],
      "parameters": {
        "operation": "set",
        "key": "={{$json.key}}",
        "value": "={{$json.value}}",
        "keyType": "automatic",
        "expire": true,
        "ttl": "={{$json.ttl}}"
      },
      "credentials": {
        "redis": {
          "id": "REDIS_INTERNAL",
          "name": "Redis Internal"
        }
      }
    },
    {
      "id": "trigger-enrichment-001",
      "name": "Trigger Enrichment",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [1700, 400],
      "parameters": {
        "source": "database",
        "workflowId": "={{$env.WF_02_WORKFLOW_ID}}",
        "waitForSubWorkflow": false,
        "additionalFields": {
          "input": "={{ { club: $json.club } }}"
        }
      }
    },
    {
      "id": "summary-001",
      "name": "Create Summary",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1100, 700],
      "parameters": {
        "functionCode": "return [{\n  json: {\n    workflow: 'WF-01 Fetch Gaming Clubs',\n    status: 'completed',\n    totalCities: $json.totalProcessed,\n    completedAt: new Date().toISOString()\n  }\n}];"
      }
    },
    {
      "id": "telegram-notify-001",
      "name": "Notify Completion",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [1300, 700],
      "parameters": {
        "resource": "message",
        "operation": "sendMessage",
        "chatId": "={{$env.TELEGRAM_ADMIN_CHAT_ID}}",
        "text": "={{ `✅ WF-01 Fetch Gaming Clubs completed\\n\\nProcessed ${$json.totalCities} cities\\nCompleted at: ${new Date($json.completedAt).toLocaleString('ru-RU')}` }}",
        "additionalFields": {}
      },
      "credentials": {
        "telegramApi": {
          "id": "TELEGRAM_BOT",
          "name": "Telegram Bot"
        }
      }
    },
    {
      "id": "error-trigger-001",
      "name": "Error Trigger",
      "type": "n8n-nodes-base.errorTrigger",
      "typeVersion": 1,
      "position": [1500, 900],
      "parameters": {}
    },
    {
      "id": "error-notify-001",
      "name": "Notify Error",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [1700, 900],
      "parameters": {
        "resource": "message",
        "operation": "sendMessage",
        "chatId": "={{$env.TELEGRAM_ADMIN_CHAT_ID}}",
        "text": "={{ `❌ Error in WF-01 Fetch Gaming Clubs\\n\\nError: ${$json.error?.message || 'Unknown error'}\\nNode: ${$json.error?.node?.name || 'Unknown'}\\nTime: ${new Date().toISOString()}` }}",
        "additionalFields": {}
      },
      "credentials": {
        "telegramApi": {
          "id": "TELEGRAM_BOT",
          "name": "Telegram Bot"
        }
      }
    }
  ],
  "connections": {
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Set Search Parameters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Set Search Parameters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily Schedule": {
      "main": [
        [
          {
            "node": "Set Search Parameters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Search Parameters": {
      "main": [
        [
          {
            "node": "Cities Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cities Data": {
      "main": [
        [
          {
            "node": "Check if Completed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if Completed": {
      "main": [
        [
          {
            "node": "Fetch Yandex Maps",
            "type": "main",
            "index": 0
          },
          {
            "node": "Set 2GIS Page",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set 2GIS Page": { "main": [[ { "node": "Fetch 2GIS", "type": "main", "index": 0 } ]] },
    "Fetch Yandex Maps": {
      "main": [
        [
          {
            "node": "Parse and Process Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch 2GIS": {
      "main": [
        [
          { "node": "Parse and Process Results", "type": "main", "index": 0 },
          { "node": "Compute 2GIS Paging", "type": "main", "index": 0 }
        ]
      ]
    },
    "Compute 2GIS Paging": {
      "main": [
        [ { "node": "2GIS Has More?", "type": "main", "index": 0 } ]
      ]
    },
    "2GIS Has More?": {
      "main": [
        [ { "node": "Set 2GIS Page", "type": "main", "index": 0 } ]
      ]
    },
    "Parse and Process Results": {
      "main": [
        [
          {
            "node": "Save to Redis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Redis": {
      "main": [
        [
          {
            "node": "Trigger Enrichment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger Enrichment": {
      "main": [
        [
          
        ]
      ]
    },
    "Create Summary": {
      "main": [
        [
          {
            "node": "Notify Completion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Trigger": {
      "main": [
        [
          {
            "node": "Notify Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "version": 2,
  "versionId": "01b6d63b-1212-4a56-8764-76e7ac6e3c1e",
  "id": "wf-01-fetch-gaming-clubs",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "tags": []
}