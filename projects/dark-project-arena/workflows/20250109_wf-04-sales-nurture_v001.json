{
  "name": "WF-04 Sales Nurture",
  "nodes": [
    {
      "id": "bitrix24-trigger-001",
      "name": "Bitrix24 Lead Trigger",
      "type": "n8n-nodes-base.bitrix24Trigger",
      "typeVersion": 1,
      "position": [260, 400],
      "parameters": {
        "resource": "lead",
        "event": ["add","update"]
      },
      "credentials": {
        "bitrix24Api": {
          "id": "BITRIX24_CRM",
          "name": "Bitrix24 CRM"
        }
      }
    },
    {
      "id": "check-lead-status-001",
      "name": "Check Lead Status",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [460, 400],
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "isNewOrInProgress",
              "leftValue": "={{ $json.STATUS_ID }}",
              "rightValue": "={{ ['NEW', 'IN_PROGRESS'] }}",
              "operator": {
                "type": "array",
                "operation": "contains",
                "rightType": "any"
              }
            }
          ],
          "combinator": "and"
        }
      }
    },
    {
      "id": "get-lead-details-001",
      "name": "Get Lead Details",
      "type": "n8n-nodes-base.bitrix24",
      "typeVersion": 1,
      "position": [660, 300],
      "parameters": {
        "resource": "lead",
        "operation": "get",
        "leadId": "={{ $json.ID }}"
      },
      "credentials": {
        "bitrix24Api": {
          "id": "BITRIX24_CRM",
          "name": "Bitrix24 CRM"
        }
      }
    },
    {
      "id": "load-knowledge-base-001",
      "name": "Load Knowledge Base",
      "type": "n8n-nodes-langchain.vectorStoreQdrant",
      "typeVersion": 1,
      "position": [860, 200],
      "parameters": {
        "mode": "load",
        "vectorStoreId": "dark-project-kb"
      }
    },
    {
      "id": "retrieve-kb-001",
      "name": "Retrieve KB Context",
      "type": "n8n-nodes-langchain.vectorStoreQdrant",
      "typeVersion": 1,
      "position": [1060, 200],
      "parameters": {
        "mode": "retrieve",
        "query": "={{ `${$json.context.clubName} ${$json.context.city} gaming club sales messaging` }}",
        "topK": 3
      }
    },
    {
      "id": "prepare-context-001",
      "name": "Prepare Context",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [860, 400],
      "parameters": {
        "mode": "manual",
        "duplicateItem": false,
        "assignments": {
          "assignments": [
            {
              "id": "context",
              "name": "context",
              "type": "object",
              "value": "={{ {\n  leadId: $json.ID,\n  clubName: $json.TITLE,\n  city: $json.ADDRESS_CITY,\n  phone: $json.PHONE?.[0]?.VALUE || '',\n  email: $json.EMAIL?.[0]?.VALUE || '',\n  telegram: $json.UF_CRM_TELEGRAM || '',\n  status: $json.STATUS_ID,\n  isChain: $json.UF_CRM_IS_CHAIN === 'Y',\n  lastComment: $json.COMMENTS || '',\n  created: $json.DATE_CREATE,\n  modified: $json.DATE_MODIFY\n} }}"
            }
          ]
        }
      }
    },
    {
      "id": "check-last-contact-001",
      "name": "Check Last Contact",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1060, 400],
      "parameters": {
        "functionCode": "// Check if we've contacted this lead recently\nconst leadId = items[0].json.context.leadId;\nconst lastContactKey = `last_contact:${leadId}`;\n\n// In production, this would check Redis or database\n// for the last contact timestamp\nconst hoursSinceLastContact = 48; // Default to 48 hours\n\n// Business logic: don't contact more than once per 24 hours\nconst shouldContact = hoursSinceLastContact >= 24;\n\nreturn [{\n  json: {\n    ...items[0].json,\n    shouldContact,\n    hoursSinceLastContact\n  }\n}];"
      }
    },
    {
      "id": "if-should-contact-001",
      "name": "Should Contact?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1260, 400],
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "shouldContact",
              "leftValue": "={{ $json.shouldContact }}",
              "rightValue": "={{ true }}",
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        }
      }
    },
    {
      "id": "generate-message-001",
      "name": "Generate Sales Message",
      "type": "n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [1460, 300],
      "parameters": {
        "model": "gpt-4o",
        "temperature": 0.7,
        "maxTokens": 500,
        "systemMessage": "Ты — Руководитель отдела продаж с 20-летним опытом в компьютерной периферии. Сторонник SPIN и Challenger-подходов. Коммуницируешь дружелюбно, по делу, на «ты», быстро приводишь выгоды, отрабатываешь возражения по методике Feel-Felt-Found, владеешь цифрами (ROI, LTV, маржа). Твоя цель — довести клиента до заказа, оставаясь экспертом-консультантом.\n\nТы продаешь периферию Dark Project серии «Арена» для компьютерных клубов. Ключевые преимущества:\n- Цена ниже конкурентов на 15-20%\n- Гарантия 2 года vs 1 год у конкурентов\n- Сервис в РФ\n- Специализация на киберспорт-аренах\n- Оптовые условия + бренд-материалы",
        "messages": "={{ `Контекст:\nКомпьютерный клуб: ${$json.context.clubName}\nГород: ${$json.context.city}\nСеть: ${$json.context.isChain ? 'Да' : 'Нет'}\nСтатус лида: ${$json.context.status}\nРелевантные факты (KB): ${( $json.documents || [] ).map(d => d.pageContent).join(' \n- ') || 'нет'}\n\nЗадача: Составь персонализированное сообщение для первого/повторного контакта. Сообщение должно быть коротким (до 500 символов), дружелюбным и содержать конкретную выгоду. Если это сеть клубов - упомяни специальные условия для сетей.` }}",
        "options": {}
      },
      "credentials": {
        "openAiApi": {
          "id": "LLM_KEY",
          "name": "OpenAI API"
        }
      }
    },
    {
      "id": "preserve-message-001",
      "name": "Preserve Message",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [1460, 360],
      "parameters": {
        "mode": "manual",
        "assignments": {"assignments": [ {"id":"msg","name":"message","type":"string","value":"={{ $json.message }}"} ]}
      }
    },
    {
      "id": "send-telegram-001",
      "name": "MTProto Send Message",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1660, 300],
      "parameters": {
        "method": "POST",
        "url": "={{ $env.MTPROTO_BRIDGE_URL }}/send_message",
        "jsonParameters": true,
        "sendBody": true,
        "bodyParametersJson": "={{ { username: $json.context.telegram, text: $json.message, parseMode: 'Markdown' } }}",
        "options": { "timeout": 30000 },
        "settings": { "retryOnFail": true, "maxTries": 3, "waitBetweenTries": 1000 }
      },
      "continueOnFail": true
    },
    {
      "id": "merge-msg-001",
      "name": "Merge Context+Msg",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [1860, 300],
      "parameters": {"mode":"combine","combinationMode":"mergeByPosition"}
    },
    {
      "id": "update-lead-status-001",
      "name": "Update Lead Status",
      "type": "n8n-nodes-base.bitrix24",
      "typeVersion": 1,
      "position": [1860, 300],
      "parameters": {
        "resource": "lead",
        "operation": "update",
        "leadId": "={{ $json.context.leadId }}",
        "updateFields": {
          "STATUS_ID": "IN_PROGRESS",
          "COMMENTS": "={{ `${$json.context.lastComment}\\n\\n[${new Date().toISOString()}] Отправлено сообщение в Telegram:\\n${$json.message}` }}"
        }
      },
      "credentials": {
        "bitrix24Api": {
          "id": "BITRIX24_CRM",
          "name": "Bitrix24 CRM"
        }
      }
    },
    {
      "id": "save-contact-time-001",
      "name": "Save Contact Time",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [2060, 300],
      "parameters": {
        "operation": "set",
        "key": "={{ `last_contact:${$json.context.leadId}` }}",
        "value": "={{ new Date().toISOString() }}",
        "keyType": "automatic",
        "expire": true,
        "ttl": 604800
      },
      "credentials": {
        "redis": {
          "id": "REDIS_INTERNAL",
          "name": "Redis Internal"
        }
      }
    },
    {
      "id": "telegram-callback-trigger-001",
      "name": "Telegram Callback Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1,
      "position": [260, 700],
      "parameters": {
        "updates": ["callback_query"]
      },
      "credentials": {
        "telegramApi": {
          "id": "TG_ROP_BOT",
          "name": "Telegram ROP Bot"
        }
      }
    },
    {
      "id": "process-callback-001",
      "name": "Process Callback",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [460, 700],
      "parameters": {
        "mode": "expression",
        "rules": {
          "rules": [
            {
              "output": 0,
              "outputKey": "interested",
              "expression": "={{ $json.callback_query.data === 'interested_more' }}"
            },
            {
              "output": 1,
              "outputKey": "price",
              "expression": "={{ $json.callback_query.data === 'request_price' }}"
            },
            {
              "output": 2,
              "outputKey": "notInterested",
              "expression": "={{ $json.callback_query.data === 'not_interested' }}"
            }
          ]
        },
        "fallbackOutput": 3
      }
    },
    {
      "id": "handle-interested-001",
      "name": "Handle Interested",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [660, 600],
      "parameters": {
        "source": "database",
        "workflowId": "={{ $env.WF_05_WORKFLOW_ID }}",
        "waitForSubWorkflow": false
      }
    },
    {
      "id": "send-price-list-001",
      "name": "Send Price List",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [660, 700],
      "parameters": {
        "operation": "sendDocument",
        "chatId": "={{ $json.callback_query.from.id }}",
        "fileId": "={{ $env.PRICE_LIST_FILE_ID }}",
        "additionalFields": {
          "caption": "📋 Актуальный прайс-лист Dark Project Arena\n\n✅ Специальные условия для сетей от 5 клубов\n✅ Гарантия 2 года на всю линейку\n✅ Бесплатная доставка от 100 тыс руб\n\nОстались вопросы? Пишите, с удовольствием проконсультирую!"
        }
      },
      "credentials": {
        "telegramApi": {
          "id": "TG_ROP_BOT",
          "name": "Telegram ROP Bot"
        }
      }
    },
    {
      "id": "handle-not-interested-001",
      "name": "Handle Not Interested",
      "type": "n8n-nodes-base.bitrix24",
      "typeVersion": 1,
      "position": [660, 800],
      "parameters": {
        "resource": "lead",
        "operation": "update",
        "leadId": "={{ $json.callback_query.message.text.match(/Lead ID: (\\d+)/)?.[1] }}",
        "updateFields": {
          "STATUS_ID": "JUNK",
          "STATUS_SEMANTIC_ID": "F",
          "COMMENTS": "={{ `Клиент не заинтересован. Ответ получен ${new Date().toISOString()}` }}"
        }
      },
      "credentials": {
        "bitrix24Api": {
          "id": "BITRIX24_CRM",
          "name": "Bitrix24 CRM"
        }
      }
    },
    {
      "id": "error-handler-001",
      "name": "Error Handler",
      "type": "n8n-nodes-base.errorTrigger",
      "typeVersion": 1,
      "position": [2260, 500],
      "parameters": {}
    },
    {
      "id": "log-error-001",
      "name": "Log Error",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [2460, 500],
      "parameters": {
        "functionCode": "const error = {\n  workflow: 'WF-04 Sales Nurture',\n  timestamp: new Date().toISOString(),\n  error: items[0].json.error,\n  context: items[0].json.context || {}\n};\n\nconsole.error('Sales Nurture Error:', error);\n\n// Could also send to monitoring service\nreturn [{ json: error }];"
      }
    }
  ],
  "connections": {
    "Bitrix24 Lead Trigger": {
      "main": [
        [
          {
            "node": "Check Lead Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Lead Status": {
      "main": [
        [
          {
            "node": "Get Lead Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Lead Details": {
      "main": [
        [
          {
            "node": "Prepare Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Knowledge Base": {
      "main": [
        [
          {
            "node": "Retrieve KB Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Retrieve KB Context": {
      "main": [
        [
          {
            "node": "Generate Sales Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Context": {
      "main": [
        [
          {
            "node": "Check Last Contact",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Last Contact": {
      "main": [
        [
          {
            "node": "Should Contact?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Should Contact?": {
      "main": [
        [
          {
            "node": "Load Knowledge Base",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Sales Message": {
      "main": [
        [
          {
            "node": "Send Telegram Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Telegram Message": {
      "main": [
        [
          {
            "node": "Update Lead Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Lead Status": {
      "main": [
        [
          {
            "node": "Save Contact Time",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Callback Trigger": {
      "main": [
        [
          {
            "node": "Process Callback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Callback": {
      "main": [
        [
          {
            "node": "Handle Interested",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Price List",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle Not Interested",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handler": {
      "main": [
        [
          {
            "node": "Log Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true
  },
  "version": 2,
  "meta": {
    "description": "Automated sales nurturing with LLM-powered personalized messages via Telegram",
    "tags": ["sales", "llm", "telegram", "nurturing"]
  }
}