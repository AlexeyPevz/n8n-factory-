{
  "name": "WF-03 Upsert CRM",
  "nodes": [
    {
      "id": "webhook-trigger-001",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [260, 400],
      "parameters": {
        "httpMethod": "POST",
        "path": "upsert-crm",
        "responseMode": "responseNode",
        "options": {}
      }
    },
    {
      "id": "validate-input-001",
      "name": "Validate Input",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [460, 400],
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{!!$json.enrichedClub?.name && !!$json.enrichedClub?.phone}}",
              "value2": true
            }
          ]
        }
      }
    },
    {
      "id": "prepare-search-001",
      "name": "Prepare Search",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [660, 300],
      "parameters": {
        "functionCode": "const enrichedClub = items[0].json.enrichedClub;\n\n// Normalize phone for search\nlet normalizedPhone = enrichedClub.phone || '';\nnormalizedPhone = normalizedPhone.replace(/[^0-9]/g, '');\nif (normalizedPhone.startsWith('8')) {\n  normalizedPhone = '7' + normalizedPhone.substring(1);\n}\n\nreturn [{\n  json: {\n    enrichedClub: enrichedClub,\n    searchPhone: normalizedPhone,\n    searchName: enrichedClub.name.toLowerCase().trim()\n  }\n}];"
      }
    },
    {
      "id": "bitrix24-search-001",
      "name": "Search Duplicate in Bitrix24",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [860, 300],
      "parameters": {
        "method": "POST",
        "url": "={{$env.BITRIX24_DOMAIN}}/rest/crm.lead.list",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpQueryAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "filter[PHONE]",
              "value": "={{$json.searchPhone}}"
            },
            {
              "name": "select[]",
              "value": "ID,TITLE,STATUS_ID,PHONE"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": []
        },
        "options": {}
      },
      "credentials": {}
    },
    {
      "id": "check-duplicate-001",
      "name": "Check if Duplicate Exists",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1060, 300],
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.result && $json.result.length > 0}}",
              "value2": true
            }
          ]
        }
      }
    },
    {
      "id": "prepare-lead-create-001",
      "name": "Prepare Lead Create Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1260, 200],
      "parameters": {
        "functionCode": "const club = $node[\"Prepare Search\"].json.enrichedClub;\n\n// Format phone array\nconst phones = [{ VALUE: club.phone, VALUE_TYPE: 'WORK' }];\nif (club.additionalPhones && club.additionalPhones.length > 0) {\n  club.additionalPhones.forEach(phone => {\n    phones.push({ VALUE: phone, VALUE_TYPE: 'WORK' });\n  });\n}\n\n// Format email array\nconst emails = [];\nif (club.email) {\n  emails.push({ VALUE: club.email, VALUE_TYPE: 'WORK' });\n}\n\n// Build lead data\nconst leadData = {\n  fields: {\n    TITLE: club.name,\n    NAME: 'Владелец',\n    STATUS_ID: 'NEW',\n    SOURCE_ID: 'WEB',\n    SOURCE_DESCRIPTION: `${club.source} (${club.sources?.join(', ') || club.source})`,\n    ADDRESS: club.address,\n    ADDRESS_CITY: club.city,\n    ADDRESS_PROVINCE: club.region,\n    COMMENTS: `Компьютерный клуб\\n\\nИсточники: ${club.sources?.join(', ') || club.source}\\nСеть: ${club.isChain ? 'Да' : 'Нет'}\\nБренд: ${club.brand || 'Не указан'}\\nКоличество филиалов: ${club.branchCount || 1}\\n\\nКонтакты:\\nTelegram: ${club.telegram || 'Не найден'}\\nVK: ${club.vk || 'Не найден'}\\nInstagram: ${club.instagram || 'Не найден'}\\nWebsite: ${club.url || 'Не указан'}\\n\\nРабочие часы: ${club.workingHours || 'Не указаны'}\\nКатегории: ${club.categories || club.rubrics || 'Не указаны'}\\n\\nКоординаты: ${club.coordinates?.lat},${club.coordinates?.lon}\\nПриоритет: ${club.priority || 'medium'}\\nОценка релевантности: ${club.relevanceScore || 5}/10\\nОценка ПК: ${club.estimatedPCs || 15}`\n  }\n};\n\n// Custom fields (conditionally)\nleadData.fields.PHONE = phones;\nif (emails.length) leadData.fields.EMAIL = emails;\nleadData.fields.UF_CRM_TELEGRAM = club.telegram || '';\nleadData.fields.UF_CRM_VK = club.vk || '';\nleadData.fields.UF_CRM_INSTAGRAM = club.instagram || '';\nleadData.fields.UF_CRM_WEBSITE = club.url || '';\nleadData.fields.UF_CRM_IS_CHAIN = club.isChain ? 'Y' : 'N';\nleadData.fields.UF_CRM_BRAND = club.brand || '';\nleadData.fields.UF_CRM_BRANCH_COUNT = club.branchCount || 1;\nleadData.fields.UF_CRM_COORDINATES = `${club.coordinates?.lat || 0},${club.coordinates?.lon || 0}`;\nleadData.fields.UF_CRM_PRIORITY = club.priority || 'medium';\nleadData.fields.UF_CRM_RELEVANCE_SCORE = club.relevanceScore || 5;\nleadData.fields.UF_CRM_ESTIMATED_PCS = club.estimatedPCs || 15;\nleadData.fields.UF_CRM_WORKING_HOURS = club.workingHours || '';\nleadData.fields.UF_CRM_ENRICHED_AT = club.enrichedAt || new Date().toISOString();\n\nreturn [{ json: leadData }];"
      }
    },
    {
      "id": "prepare-lead-update-001",
      "name": "Prepare Lead Update Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1260, 400],
      "parameters": {
        "functionCode": "const club = $node[\"Prepare Search\"].json.enrichedClub;\nconst searchResult = $node[\"Search Duplicate in Bitrix24\"].json;\nconst existing = Array.isArray(searchResult.result) ? searchResult.result[0] : null;\n\nconst updateData = { id: existing?.ID, fields: {} };\nif (existing?.STATUS_ID === 'JUNK') {\n  updateData.fields.STATUS_ID = 'NEW';\n}\nupdateData.fields.COMMENTS = `${existing?.COMMENTS || ''}\\n\\n[${new Date().toISOString()}] Обновлено из WF-03`;\n\nif (club.email) updateData.fields.EMAIL = [{ VALUE: club.email, VALUE_TYPE: 'WORK' }];\nif (club.telegram) updateData.fields.UF_CRM_TELEGRAM = club.telegram;\nif (club.vk) updateData.fields.UF_CRM_VK = club.vk;\nif (club.instagram) updateData.fields.UF_CRM_INSTAGRAM = club.instagram;\nif (club.priority) updateData.fields.UF_CRM_PRIORITY = club.priority;\nif (club.relevanceScore) updateData.fields.UF_CRM_RELEVANCE_SCORE = club.relevanceScore;\nif (club.estimatedPCs) updateData.fields.UF_CRM_ESTIMATED_PCS = club.estimatedPCs;\nupdateData.fields.UF_CRM_ENRICHED_AT = club.enrichedAt || new Date().toISOString();\n\nreturn [{ json: updateData }];"
      }
    },
    {
      "id": "bitrix24-create-001",
      "name": "Create New Lead",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1460, 200],
      "parameters": {
        "method": "POST",
        "url": "={{$env.BITRIX24_DOMAIN}}/rest/crm.lead.add",
        "sendBody": true,
        "jsonParameters": true,
        "bodyParametersJson": "={{ $json }}",
        "options": {}
      },
      "credentials": {}
    },
    {
      "id": "bitrix24-update-001",
      "name": "Update Existing Lead",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1460, 400],
      "parameters": {
        "method": "POST",
        "url": "={{$env.BITRIX24_DOMAIN}}/rest/crm.lead.update",
        "sendBody": true,
        "jsonParameters": true,
        "bodyParametersJson": "={{ $json }}",
        "options": {}
      },
      "credentials": {}
    },
    {
      "id": "merge-result-001",
      "name": "Merge Result",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [1660, 300],
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {}
      }
    },
    {
      "id": "prepare-response-001",
      "name": "Prepare Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1860, 300],
      "parameters": {
        "functionCode": "const check = $node[\"Check if Duplicate Exists\"].json;\nconst isUpdate = !!(check && check.json && check.json.result && check.json.result.length > 0);\nconst result = items[0].json;\nconst club = $node[\"Prepare Search\"].json.enrichedClub;\n\nlet leadId;\nif (isUpdate) {\n  leadId = $node[\"Prepare Lead Update Data\"].json.id;\n} else {\n  leadId = result.result;\n}\n\nreturn [{\n  json: {\n    success: true,\n    action: isUpdate ? 'updated' : 'created',\n    leadId,\n    clubName: club.name,\n    clubCity: club.city,\n    priority: club.priority,\n    relevanceScore: club.relevanceScore,\n    estimatedPCs: club.estimatedPCs,\n    enrichedFields: {\n      email: !!club.email,\n      telegram: !!club.telegram,\n      vk: !!club.vk,\n      instagram: !!club.instagram\n    },\n    timestamp: new Date().toISOString()\n  }\n}];"
      }
    },
    {
      "id": "log-activity-001",
      "name": "Log CRM Activity",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [2060, 300],
      "parameters": {
        "operation": "set",
        "key": "={{ `crm_activity:${new Date().toISOString()}:${$json.leadId}` }}",
        "value": "={{JSON.stringify($json)}}",
        "keyType": "automatic",
        "expire": true,
        "ttl": 7776000
      },
      "credentials": {
        "redis": {
          "id": "REDIS_INTERNAL",
          "name": "Redis Internal"
        }
      }
    },
    {
      "id": "respond-success-001",
      "name": "Respond Success",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2260, 300],
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{$json}}",
        "options": {}
      }
    },
    {
      "id": "respond-invalid-001",
      "name": "Respond Invalid",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [660, 600],
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  success: false,\n  error: 'Invalid input data. Name and phone are required.',\n  receivedData: {\n    hasName: !!$json.enrichedClub?.name,\n    hasPhone: !!$json.enrichedClub?.phone\n  },\n  timestamp: new Date().toISOString()\n} }}",
        "responseCode": 400,
        "options": {}
      }
    },
    {
      "id": "error-trigger-001",
      "name": "Error Trigger",
      "type": "n8n-nodes-base.errorTrigger",
      "typeVersion": 1,
      "position": [2060, 600],
      "parameters": {}
    },
    {
      "id": "respond-error-001",
      "name": "Respond Error",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2260, 600],
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  success: false,\n  error: $json.error?.message || 'Unknown error occurred',\n  node: $json.error?.node?.name,\n  timestamp: new Date().toISOString()\n} }}",
        "responseCode": 500,
        "options": {}
      }
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Validate Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Input": {
      "main": [
        [
          {
            "node": "Prepare Search",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond Invalid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Search": {
      "main": [
        [
          {
            "node": "Search Duplicate in Bitrix24",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Duplicate in Bitrix24": {
      "main": [
        [
          {
            "node": "Check if Duplicate Exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if Duplicate Exists": {
      "main": [
        [
          {
            "node": "Prepare Lead Update Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Lead Create Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Lead Create Data": {
      "main": [
        [
          {
            "node": "Create New Lead",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Lead Update Data": {
      "main": [
        [
          {
            "node": "Update Existing Lead",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create New Lead": {
      "main": [
        [
          {
            "node": "Merge Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Existing Lead": {
      "main": [
        [
          {
            "node": "Merge Result",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Result": {
      "main": [
        [
          {
            "node": "Prepare Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Response": {
      "main": [
        [
          {
            "node": "Log CRM Activity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log CRM Activity": {
      "main": [
        [
          {
            "node": "Respond Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Trigger": {
      "main": [
        [
          {
            "node": "Respond Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "version": 2,
  "versionId": "e5f7g8h9-4343-5c21-ba98-10g8cd7e5f3g",
  "id": "wf-03-upsert-crm",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "tags": []
}