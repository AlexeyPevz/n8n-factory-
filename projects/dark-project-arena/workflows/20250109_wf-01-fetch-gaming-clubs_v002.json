{
  "name": "WF-01 Fetch Gaming Clubs",
  "nodes": [
    {
      "id": "exec-trigger-001",
      "name": "When Executed by Another Workflow",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [260, 200],
      "parameters": {
        "inputSource": "passthrough"
      }
    },
    {
      "id": "manual-trigger-001",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [260, 300],
      "parameters": {}
    },
    {
      "id": "schedule-trigger-001",
      "name": "Daily Schedule",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [260, 500],
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "custom",
              "cronExpression": "0 3 * * *"
            }
          ]
        }
      }
    },
    {
      "id": "merge-triggers-001",
      "name": "Merge Triggers",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [460, 400],
      "parameters": {
        "mode": "combine",
        "combinationMode": "chooseBranch",
        "options": {}
      }
    },
    {
      "id": "set-search-params-001",
      "name": "Set Search Parameters",
      "type": "n8n-nodes-base.set",
      "typeVersion": 2,
      "position": [660, 400],
      "parameters": {
        "values": {
          "string": [
            {
              "name": "searchQuery",
              "value": "={{ $json.query || 'компьютерный клуб киберспорт' }}"
            }
          ],
          "number": [
            {
              "name": "cityIndex",
              "value": 0
            }
          ]
        },
        "options": {}
      }
    },
    {
      "id": "cities-data-001",
      "name": "Cities Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [860, 400],
      "parameters": {
        "functionCode": "// If executed by orchestrator, use provided city data\nif ($json.city) {\n  return [{ json: {\n    city: $json.city,\n    region: $json.region || '',\n    city_id_2gis: $json.city_id_2gis || '',\n    searchQuery: $json.searchQuery || $json.query || 'компьютерный клуб киберспорт',\n    runId: `${$json.city}_${Date.now()}`\n  }}];\n}\n\n// Fallback manual list for ad-hoc runs\nconst cities = [\n  {city: 'Москва', region: 'Московская область'},\n  {city: 'Санкт-Петербург', region: 'Ленинградская область'},\n  {city: 'Новосибирск', region: 'Новосибирская область'}\n];\n\nconst cityIndex = $json.cityIndex || 0;\nif (cityIndex < cities.length) {\n  return [{ json: {\n    ...cities[cityIndex],\n    searchQuery: $json.searchQuery,\n    cityIndex,\n    totalCities: cities.length,\n    hasMore: cityIndex < cities.length - 1,\n    runId: `${cities[cityIndex].city}_${Date.now()}`\n  }}];\n}\nreturn [{ json: { completed: true, totalProcessed: cities.length } }];"
      }
    },
    {
      "id": "check-completed-001",
      "name": "Check if Completed",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1060, 400],
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.completed}}",
              "value2": true
            }
          ]
        }
      }
    },
    {
      "id": "log-start-001",
      "name": "Log Start",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1260, 300],
      "parameters": {
        "functionCode": "const cityData = items[0].json;\nconsole.log(`Starting fetch for city: ${cityData.city}, runId: ${cityData.runId}`);\nreturn items;"
      }
    },
    {
      "id": "wait-before-apis-001",
      "name": "Initial Rate Limit",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [1460, 400],
      "parameters": {
        "amount": 0.5,
        "unit": "seconds"
      }
    },
    {
      "id": "http-yandex-001",
      "name": "Fetch Yandex Maps",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1660, 300],
      "parameters": {
        "method": "GET",
        "url": "https://search-maps.yandex.ru/v1/",
        "authentication": "none",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "text",
              "value": "={{ $json.searchQuery + ' ' + $json.city }}"
            },
            {
              "name": "type",
              "value": "biz"
            },
            {
              "name": "lang",
              "value": "ru_RU"
            },
            {
              "name": "results",
              "value": "50"
            },
            {
              "name": "apikey",
              "value": "={{ $env.YANDEX_MAPS_API_KEY }}"
            }
          ]
        },
        "options": { 
          "timeout": 30000, 
          "allowUnauthorizedCerts": false,
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "continueOnFail": true
    },
    {
      "id": "http-2gis-001", 
      "name": "Fetch 2GIS",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1660, 500],
      "parameters": {
        "method": "GET",
        "url": "https://catalog.api.2gis.com/3.0/items",
        "authentication": "none",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "={{$json.searchQuery}}"
            },
            {
              "name": "type",
              "value": "branch"
            },
            {
              "name": "page_size",
              "value": "50"
            },
            {
              "name": "page",
              "value": "1"
            },
            {
              "name": "fields",
              "value": "items.contact_groups,items.point,items.address_name,items.org"
            },
            {
              "name": "key",
              "value": "={{ $env.TWOGIS_API_KEY }}"
            },
            {
              "name": "city_id",
              "value": "={{ $json.city_id_2gis || '' }}"
            }
          ]
        },
        "options": { 
          "timeout": 30000, 
          "allowUnauthorizedCerts": false,
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "continueOnFail": true
    },
    {
      "id": "check-api-success-001",
      "name": "Check API Success",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1860, 400],
      "parameters": {
        "functionCode": "const yandexResponse = $node['Fetch Yandex Maps'].json;\nconst twoGisResponse = $node['Fetch 2GIS'].json;\nconst cityData = $node['Cities Data'].json;\n\n// Check responses\nconst yandexSuccess = yandexResponse?.statusCode === 200 && yandexResponse?.body?.features;\nconst twoGisSuccess = twoGisResponse?.statusCode === 200 && twoGisResponse?.body?.result;\n\nif (!yandexSuccess && !twoGisSuccess) {\n  // Both failed\n  return [{ json: {\n    ...cityData,\n    status: 'failed',\n    yandexError: yandexResponse?.statusCode || 'No response',\n    twoGisError: twoGisResponse?.statusCode || 'No response',\n    retry: true\n  }}];\n}\n\n// At least one succeeded\nreturn [{ json: {\n  ...cityData,\n  status: 'success',\n  yandexData: yandexSuccess ? yandexResponse.body : null,\n  twoGisData: twoGisSuccess ? twoGisResponse.body : null\n}}];"
      }
    },
    {
      "id": "check-need-retry-001",
      "name": "Need Retry?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [2060, 400],
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "needRetry",
              "leftValue": "={{ $json.status }}",
              "rightValue": "failed",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        }
      }
    },
    {
      "id": "log-retry-001",
      "name": "Log Retry",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [2260, 300],
      "parameters": {
        "functionCode": "const error = {\n  city: $json.city,\n  yandexError: $json.yandexError,\n  twoGisError: $json.twoGisError,\n  timestamp: new Date().toISOString(),\n  action: 'Will skip this city'\n};\n\nconsole.error('API failures for city:', error);\n\n// Save to Redis for monitoring\nreturn [{ json: {\n  ...error,\n  key: `error:fetch:${$json.city}:${Date.now()}`\n}}];"
      }
    },
    {
      "id": "save-error-redis-001",
      "name": "Save Error",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [2460, 300],
      "parameters": {
        "operation": "set",
        "key": "={{$json.key}}",
        "value": "={{JSON.stringify($json)}}",
        "keyType": "automatic",
        "expire": true,
        "ttl": 86400
      },
      "credentials": {
        "redis": {
          "id": "REDIS_INTERNAL",
          "name": "Redis Internal"
        }
      }
    },
    {
      "id": "parse-process-001",
      "name": "Parse and Process Results",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [2260, 500],
      "parameters": {
        "functionCode": "const cityData = $node['Cities Data'].json;\nconst { yandexData, twoGisData } = items[0].json;\nconst clubs = [];\n\n// Parse Yandex results\nif (yandexData?.features && Array.isArray(yandexData.features)) {\n  for (const feature of yandexData.features) {\n    const props = feature.properties || {};\n    const meta = props.CompanyMetaData || {};\n    const phones = (meta.Phones || []).map(p => p.formatted).filter(Boolean);\n    \n    clubs.push({\n      name: props.name || '',\n      address: props.address?.formatted || '',\n      phone: phones[0] || '',\n      additionalPhones: phones.slice(1),\n      city: cityData.city,\n      region: cityData.region,\n      source: 'YandexMaps',\n      coordinates: {\n        lat: feature.geometry?.coordinates?.[1] || 0,\n        lon: feature.geometry?.coordinates?.[0] || 0\n      },\n      url: meta.url || '',\n      workingHours: meta.Hours?.text || '',\n      categories: (meta.Categories || []).map(c => c.name).join(', '),\n      foundAt: new Date().toISOString(),\n      runId: cityData.runId\n    });\n  }\n}\n\n// Parse 2GIS results\nif (twoGisData?.result?.items && Array.isArray(twoGisData.result.items)) {\n  for (const item of twoGisData.result.items) {\n    const contacts = {};\n    \n    // Extract contacts\n    for (const group of (item.contact_groups || [])) {\n      for (const contact of (group.contacts || [])) {\n        if (!contacts[contact.type]) {\n          contacts[contact.type] = [];\n        }\n        contacts[contact.type].push(contact.value);\n      }\n    }\n    \n    clubs.push({\n      name: item.name || '',\n      address: item.address_name || '',\n      phone: (contacts.phone || [])[0] || '',\n      additionalPhones: (contacts.phone || []).slice(1),\n      email: (contacts.email || [])[0] || '',\n      city: cityData.city,\n      region: cityData.region,\n      source: '2GIS',\n      isChain: (item.org?.branch_count || 0) > 1,\n      brand: item.org?.name || '',\n      branchCount: item.org?.branch_count || 1,\n      coordinates: {\n        lat: item.point?.lat || 0,\n        lon: item.point?.lon || 0\n      },\n      url: (contacts.website || [])[0] || '',\n      telegram: (contacts.telegram || [])[0] || '',\n      rubrics: (item.rubrics || []).map(r => r.name).join(', '),\n      foundAt: new Date().toISOString(),\n      runId: cityData.runId\n    });\n  }\n}\n\n// Deduplicate by name+address\nconst uniqueClubs = [];\nconst seen = new Set();\n\nfor (const club of clubs) {\n  if (club.name && club.address) {\n    const key = `${club.name.toLowerCase().trim()}_${club.address.toLowerCase().trim()}`;\n    if (!seen.has(key)) {\n      seen.add(key);\n      uniqueClubs.push(club);\n    }\n  }\n}\n\nconsole.log(`Found ${uniqueClubs.length} unique clubs in ${cityData.city}`);\n\n// Return clubs for Redis save\nreturn uniqueClubs.map(club => ({\n  json: {\n    key: `club:${cityData.city.replace(/\\s+/g, '_')}:${club.name.replace(/[^a-zA-Z0-9А-Яа-я]/g, '_')}`,\n    value: JSON.stringify(club),\n    ttl: 30 * 24 * 60 * 60,\n    club: club,\n    cityData: cityData\n  }\n}));"
      }
    },
    {
      "id": "check-has-clubs-001",
      "name": "Has Clubs?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [2460, 500],
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "hasClubs",
              "leftValue": "={{ $input.all().length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        }
      }
    },
    {
      "id": "split-clubs-001",
      "name": "Split Clubs for Save",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [2660, 400],
      "parameters": {
        "batchSize": 10,
        "options": {}
      }
    },
    {
      "id": "redis-save-001",
      "name": "Save to Redis",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [2860, 400],
      "parameters": {
        "operation": "set",
        "key": "={{$json.key}}",
        "value": "={{$json.value}}",
        "keyType": "automatic",
        "expire": true,
        "ttl": "={{$json.ttl}}"
      },
      "credentials": {
        "redis": {
          "id": "REDIS_INTERNAL",
          "name": "Redis Internal"
        }
      }
    },
    {
      "id": "trigger-enrichment-001",
      "name": "Trigger Enrichment",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1,
      "position": [3060, 400],
      "parameters": {
        "source": "database",
        "workflowId": "={{$env.WF_02_WORKFLOW_ID}}",
        "waitForSubWorkflow": false
      },
      "continueOnFail": true
    },
    {
      "id": "wait-between-batches-001",
      "name": "Wait Between Batches",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [3260, 400],
      "parameters": {
        "amount": 0.5,
        "unit": "seconds"
      }
    },
    {
      "id": "no-clubs-log-001",
      "name": "Log No Clubs",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [2660, 600],
      "parameters": {
        "functionCode": "const cityData = $node['Cities Data'].json;\nconsole.log(`No clubs found in ${cityData.city}`);\nreturn [{ json: { city: cityData.city, clubsFound: 0 } }];"
      }
    },
    {
      "id": "merge-process-001",
      "name": "Merge Processing",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [3460, 500],
      "parameters": {
        "mode": "combine",
        "combinationMode": "chooseBranch",
        "options": {}
      }
    },
    {
      "id": "summary-001",
      "name": "Create Summary",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1060, 700],
      "parameters": {
        "functionCode": "return [{\n  json: {\n    workflow: 'WF-01 Fetch Gaming Clubs',\n    status: 'completed',\n    totalCities: $json.totalProcessed || 1,\n    completedAt: new Date().toISOString()\n  }\n}];"
      }
    },
    {
      "id": "telegram-notify-001",
      "name": "Notify Completion",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [1260, 700],
      "parameters": {
        "resource": "message",
        "operation": "sendMessage",
        "chatId": "={{$env.TELEGRAM_ADMIN_CHAT_ID}}",
        "text": "={{ `✅ WF-01 Fetch Gaming Clubs completed\\n\\nProcessed ${$json.totalCities} cities\\nCompleted at: ${new Date($json.completedAt).toLocaleString('ru-RU')}` }}",
        "additionalFields": {}
      },
      "credentials": {
        "telegramApi": {
          "id": "TELEGRAM_BOT",
          "name": "Telegram Bot"
        }
      }
    },
    {
      "id": "error-trigger-001",
      "name": "Error Trigger",
      "type": "n8n-nodes-base.errorTrigger",
      "typeVersion": 1,
      "position": [260, 900],
      "parameters": {}
    },
    {
      "id": "error-notify-001",
      "name": "Notify Error",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [460, 900],
      "parameters": {
        "resource": "message",
        "operation": "sendMessage",
        "chatId": "={{$env.TELEGRAM_ADMIN_CHAT_ID}}",
        "text": "={{ `❌ WF-01 Error\\n\\nNode: ${$json.node?.name || 'Unknown'}\\nError: ${$json.error?.message || 'Unknown'}\\nTime: ${new Date().toISOString()}` }}",
        "additionalFields": {}
      },
      "credentials": {
        "telegramApi": {
          "id": "TELEGRAM_BOT",
          "name": "Telegram Bot"
        }
      }
    }
  ],
  "connections": {
    "When Executed by Another Workflow": {
      "main": [[{"node": "Merge Triggers", "type": "main", "index": 0}]]
    },
    "Manual Trigger": {
      "main": [[{"node": "Merge Triggers", "type": "main", "index": 1}]]
    },
    "Daily Schedule": {
      "main": [[{"node": "Merge Triggers", "type": "main", "index": 2}]]
    },
    "Merge Triggers": {
      "main": [[{"node": "Set Search Parameters", "type": "main", "index": 0}]]
    },
    "Set Search Parameters": {
      "main": [[{"node": "Cities Data", "type": "main", "index": 0}]]
    },
    "Cities Data": {
      "main": [[{"node": "Check if Completed", "type": "main", "index": 0}]]
    },
    "Check if Completed": {
      "main": [
        [{"node": "Log Start", "type": "main", "index": 0}],
        [{"node": "Create Summary", "type": "main", "index": 0}]
      ]
    },
    "Log Start": {
      "main": [[{"node": "Initial Rate Limit", "type": "main", "index": 0}]]
    },
    "Initial Rate Limit": {
      "main": [[
        {"node": "Fetch Yandex Maps", "type": "main", "index": 0},
        {"node": "Fetch 2GIS", "type": "main", "index": 0}
      ]]
    },
    "Fetch Yandex Maps": {
      "main": [[{"node": "Check API Success", "type": "main", "index": 0}]]
    },
    "Fetch 2GIS": {
      "main": [[{"node": "Check API Success", "type": "main", "index": 0}]]
    },
    "Check API Success": {
      "main": [[{"node": "Need Retry?", "type": "main", "index": 0}]]
    },
    "Need Retry?": {
      "main": [
        [{"node": "Log Retry", "type": "main", "index": 0}],
        [{"node": "Parse and Process Results", "type": "main", "index": 0}]
      ]
    },
    "Log Retry": {
      "main": [[{"node": "Save Error", "type": "main", "index": 0}]]
    },
    "Save Error": {
      "main": [[{"node": "Merge Processing", "type": "main", "index": 0}]]
    },
    "Parse and Process Results": {
      "main": [[{"node": "Has Clubs?", "type": "main", "index": 0}]]
    },
    "Has Clubs?": {
      "main": [
        [{"node": "Split Clubs for Save", "type": "main", "index": 0}],
        [{"node": "Log No Clubs", "type": "main", "index": 0}]
      ]
    },
    "Split Clubs for Save": {
      "main": [
        [{"node": "Save to Redis", "type": "main", "index": 0}],
        [{"node": "Merge Processing", "type": "main", "index": 0}]
      ]
    },
    "Save to Redis": {
      "main": [[{"node": "Trigger Enrichment", "type": "main", "index": 0}]]
    },
    "Trigger Enrichment": {
      "main": [[{"node": "Wait Between Batches", "type": "main", "index": 0}]]
    },
    "Wait Between Batches": {
      "main": [[{"node": "Split Clubs for Save", "type": "main", "index": 0}]]
    },
    "Log No Clubs": {
      "main": [[{"node": "Merge Processing", "type": "main", "index": 0}]]
    },
    "Merge Processing": {
      "main": [[{"node": "Cities Data", "type": "main", "index": 0}]]
    },
    "Create Summary": {
      "main": [[{"node": "Notify Completion", "type": "main", "index": 0}]]
    },
    "Error Trigger": {
      "main": [[{"node": "Notify Error", "type": "main", "index": 0}]]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "version": 2,
  "id": "wf-01-fetch-gaming-clubs",
  "meta": {
    "templateCredsSetupCompleted": true,
    "description": "Fetches gaming clubs from Yandex Maps and 2GIS with error handling and rate limiting",
    "version": "0.0.2"
  },
  "tags": []
}