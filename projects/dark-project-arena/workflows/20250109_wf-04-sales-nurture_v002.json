{
  "name": "WF-04 Sales Nurture",
  "nodes": [
    {
      "id": "bitrix24-trigger-001",
      "name": "Bitrix24 Lead Trigger",
      "type": "n8n-nodes-base.bitrix24Trigger",
      "typeVersion": 1,
      "position": [260, 400],
      "parameters": {
        "resource": "lead",
        "event": ["add","update"]
      },
      "credentials": {
        "bitrix24Api": {
          "id": "BITRIX24_CRM",
          "name": "Bitrix24 CRM"
        }
      }
    },
    {
      "id": "check-lead-status-001",
      "name": "Check Lead Status",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [460, 400],
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "isNewOrInProgress",
              "leftValue": "={{ $json.STATUS_ID }}",
              "rightValue": "NEW,IN_PROGRESS",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        }
      }
    },
    {
      "id": "get-lead-details-001",
      "name": "Get Lead Details",
      "type": "n8n-nodes-base.bitrix24",
      "typeVersion": 1,
      "position": [660, 300],
      "parameters": {
        "resource": "lead",
        "operation": "get",
        "leadId": "={{ $json.ID }}"
      },
      "credentials": {
        "bitrix24Api": {
          "id": "BITRIX24_CRM",
          "name": "Bitrix24 CRM"
        }
      }
    },
    {
      "id": "prepare-context-001",
      "name": "Prepare Context",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [860, 400],
      "parameters": {
        "mode": "manual",
        "duplicateItem": false,
        "assignments": {
          "assignments": [
            {
              "id": "context",
              "name": "context",
              "type": "object",
              "value": "={{ {\n  leadId: $json.ID,\n  clubName: $json.TITLE,\n  city: $json.ADDRESS_CITY,\n  phone: $json.PHONE?.[0]?.VALUE || '',\n  email: $json.EMAIL?.[0]?.VALUE || '',\n  telegram: $json.UF_CRM_TELEGRAM || '',\n  status: $json.STATUS_ID,\n  isChain: $json.UF_CRM_IS_CHAIN === 'Y',\n  lastComment: $json.COMMENTS || '',\n  created: $json.DATE_CREATE,\n  modified: $json.DATE_MODIFY\n} }}"
            }
          ]
        },
        "options": {}
      }
    },
    {
      "id": "redis-get-last-contact-001",
      "name": "Read Last Contact",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [1060, 400],
      "parameters": {
        "operation": "get",
        "key": "={{ `last_contact:${$json.context.leadId}` }}"
      },
      "credentials": {
        "redis": {
          "id": "REDIS_INTERNAL",
          "name": "Redis Internal"
        }
      },
      "continueOnFail": true
    },
    {
      "id": "check-last-contact-001",
      "name": "Check Last Contact",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1260, 400],
      "parameters": {
        "functionCode": "const leadId = items[0].json.context.leadId;\nconst raw = $node['Read Last Contact']?.json?.value;\nlet hoursSinceLastContact = 9999;\nif (raw) {\n  const lastTs = new Date(raw).getTime();\n  if (!isNaN(lastTs)) {\n    hoursSinceLastContact = Math.floor((Date.now() - lastTs) / 3600000);\n  }\n}\nconst shouldContact = hoursSinceLastContact >= 24;\nreturn [{ json: { ...items[0].json, shouldContact, hoursSinceLastContact } }];"
      }
    },
    {
      "id": "should-contact-if-001",
      "name": "Should Contact?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1460, 400],
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "shouldContactCheck",
              "leftValue": "={{ $json.shouldContact }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "true"
              }
            }
          ],
          "combinator": "and"
        }
      }
    },
    {
      "id": "load-kb-from-redis-001",
      "name": "Load KB from Redis",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [1660, 200],
      "parameters": {
        "operation": "keys",
        "key": "kb:darkproject:*"
      },
      "credentials": {
        "redis": {
          "id": "REDIS_INTERNAL",
          "name": "Redis Internal"
        }
      }
    },
    {
      "id": "get-kb-values-001",
      "name": "Get KB Values",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [1860, 200],
      "parameters": {
        "operation": "get",
        "key": "={{ $json }}"
      },
      "credentials": {
        "redis": {
          "id": "REDIS_INTERNAL",
          "name": "Redis Internal"
        }
      }
    },
    {
      "id": "prepare-kb-context-001",
      "name": "Prepare KB Context",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [2060, 200],
      "parameters": {
        "functionCode": "// Собираем контекст из базы знаний\nconst kbItems = $input.all().map(item => {\n  try {\n    return JSON.parse(item.json.value || '{}');\n  } catch (e) {\n    return { text: item.json.value || '' };\n  }\n});\n\n// Фильтруем релевантные факты\nconst context = $node['Should Contact?'].json.context;\nconst relevantFacts = kbItems.filter(item => {\n  const text = (item.text || '').toLowerCase();\n  return text.includes('периферия') || \n         text.includes('dark project') || \n         text.includes('киберспорт') ||\n         (context.isChain && text.includes('сеть'));\n}).slice(0, 3);\n\nreturn [{ \n  json: { \n    ...context,\n    kbContext: relevantFacts.map(f => f.text || f.content).join('\\n'),\n    kbItems: relevantFacts\n  } \n}];"
      }
    },
    {
      "id": "generate-message-openai-001",
      "name": "Generate Message via OpenAI",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2260, 300],
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParametersJson": "={{ {\n  \"model\": \"gpt-4o\",\n  \"temperature\": 0.7,\n  \"max_tokens\": 500,\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"Ты — Руководитель отдела продаж с 20-летним опытом в компьютерной периферии. Сторонник SPIN и Challenger-подходов. Коммуницируешь дружелюбно, по делу, на «ты», быстро приводишь выгоды, отрабатываешь возражения по методике Feel-Felt-Found, владеешь цифрами (ROI, LTV, маржа). Твоя цель — довести клиента до заказа, оставаясь экспертом-консультантом.\\n\\nТы продаешь периферию Dark Project серии «Арена» для компьютерных клубов. Ключевые преимущества:\\n- Цена ниже конкурентов на 15-20%\\n- Гарантия 2 года vs 1 год у конкурентов\\n- Сервис в РФ\\n- Специализация на киберспорт-аренах\\n- Оптовые условия + бренд-материалы\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": `Контекст:\\nКомпьютерный клуб: ${$json.clubName}\\nГород: ${$json.city}\\nСеть: ${$json.isChain ? 'Да' : 'Нет'}\\nСтатус лида: ${$json.status}\\nРелевантные факты (KB): ${$json.kbContext || 'нет'}\\n\\nЗадача: Составь персонализированное сообщение для первого/повторного контакта. Сообщение должно быть коротким (до 500 символов), дружелюбным и содержать конкретную выгоду. Если это сеть клубов - упомяни специальные условия для сетей.`\n    }\n  ]\n} }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "credentials": {
        "openAiApi": {
          "id": "LLM_KEY",
          "name": "OpenAI API"
        }
      }
    },
    {
      "id": "extract-message-001",
      "name": "Extract Message",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3,
      "position": [2460, 300],
      "parameters": {
        "mode": "manual",
        "duplicateItem": false,
        "assignments": {
          "assignments": [
            {
              "id": "message",
              "name": "message",
              "type": "string",
              "value": "={{ $json.choices[0].message.content }}"
            }
          ]
        },
        "options": {}
      }
    },
    {
      "id": "check-telegram-001",
      "name": "Check if Telegram Available",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [2660, 300],
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "hasTelegram",
              "leftValue": "={{ $node['Should Contact?'].json.context.telegram }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            }
          ],
          "combinator": "and"
        }
      }
    },
    {
      "id": "send-telegram-bot-001",
      "name": "Send via Telegram Bot",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [2860, 200],
      "parameters": {
        "operation": "sendMessage",
        "chatId": "={{ $node['Should Contact?'].json.context.telegram }}",
        "text": "={{ $json.message }}",
        "additionalFields": {
          "parse_mode": "HTML",
          "disable_web_page_preview": true
        }
      },
      "credentials": {
        "telegramApi": {
          "id": "TELEGRAM_BOT",
          "name": "Telegram Bot"
        }
      },
      "continueOnFail": true
    },
    {
      "id": "create-crm-task-001",
      "name": "Create CRM Task",
      "type": "n8n-nodes-base.bitrix24",
      "typeVersion": 1,
      "position": [2860, 400],
      "parameters": {
        "resource": "task",
        "operation": "create",
        "title": "={{ `Связаться с клиентом: ${$node['Should Contact?'].json.context.clubName}` }}",
        "description": "={{ `Отправить сообщение:\\n\\n${$json.message}\\n\\nКонтакты:\\nТелефон: ${$node['Should Contact?'].json.context.phone}\\nEmail: ${$node['Should Contact?'].json.context.email}` }}",
        "responsible": "={{ $env.DEFAULT_SALES_USER_ID }}",
        "deadline": "={{ new Date(Date.now() + 24*60*60*1000).toISOString() }}",
        "additionalFields": {
          "CRM_LEAD": "={{ $node['Should Contact?'].json.context.leadId }}"
        }
      },
      "credentials": {
        "bitrix24Api": {
          "id": "BITRIX24_CRM",
          "name": "Bitrix24 CRM"
        }
      }
    },
    {
      "id": "update-lead-status-001",
      "name": "Update Lead Status",
      "type": "n8n-nodes-base.bitrix24",
      "typeVersion": 1,
      "position": [3060, 300],
      "parameters": {
        "resource": "lead",
        "operation": "update",
        "leadId": "={{ $node['Should Contact?'].json.context.leadId }}",
        "updateFields": {
          "STATUS_ID": "IN_PROGRESS",
          "COMMENTS": "={{ `${$node['Should Contact?'].json.context.lastComment}\\n\\n[${new Date().toISOString()}] Автоматическое сообщение отправлено:\\n${$json.message}` }}"
        }
      },
      "credentials": {
        "bitrix24Api": {
          "id": "BITRIX24_CRM",
          "name": "Bitrix24 CRM"
        }
      }
    },
    {
      "id": "save-contact-time-001",
      "name": "Save Contact Time",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [3260, 300],
      "parameters": {
        "operation": "set",
        "key": "={{ `last_contact:${$node['Should Contact?'].json.context.leadId}` }}",
        "value": "={{ new Date().toISOString() }}",
        "keyType": "automatic",
        "expire": true,
        "ttl": 604800
      },
      "credentials": {
        "redis": {
          "id": "REDIS_INTERNAL",
          "name": "Redis Internal"
        }
      }
    },
    {
      "id": "merge-results-001",
      "name": "Merge Results",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [3060, 100],
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {}
      }
    },
    {
      "id": "error-trigger-001",
      "name": "Error Trigger",
      "type": "n8n-nodes-base.errorTrigger",
      "typeVersion": 1,
      "position": [260, 700],
      "parameters": {}
    },
    {
      "id": "log-error-001",
      "name": "Log Error",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 700],
      "parameters": {
        "functionCode": "const error = {\n  workflow: 'WF-04 Sales Nurture',\n  timestamp: new Date().toISOString(),\n  error: $json.error?.message || 'Unknown error',\n  node: $json.node?.name || 'Unknown',\n  leadId: $json.context?.leadId || 'Unknown'\n};\n\nconsole.error('WF-04 Error:', error);\nreturn [{ json: error }];"
      }
    },
    {
      "id": "save-error-redis-001",
      "name": "Save Error to Redis",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [660, 700],
      "parameters": {
        "operation": "set",
        "key": "={{ `error:wf04:${Date.now()}` }}",
        "value": "={{ JSON.stringify($json) }}",
        "keyType": "automatic",
        "expire": true,
        "ttl": 86400
      },
      "credentials": {
        "redis": {
          "id": "REDIS_INTERNAL",
          "name": "Redis Internal"
        }
      }
    },
    {
      "id": "notify-error-telegram-001",
      "name": "Notify Error",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [860, 700],
      "parameters": {
        "operation": "sendMessage",
        "chatId": "={{ $env.TELEGRAM_ADMIN_CHAT_ID }}",
        "text": "={{ `❌ WF-04 Sales Nurture Error\\n\\n${JSON.stringify($json, null, 2)}` }}"
      },
      "credentials": {
        "telegramApi": {
          "id": "TELEGRAM_BOT",
          "name": "Telegram Bot"
        }
      }
    }
  ],
  "connections": {
    "Bitrix24 Lead Trigger": {
      "main": [[{"node": "Check Lead Status", "type": "main", "index": 0}]]
    },
    "Check Lead Status": {
      "main": [
        [{"node": "Get Lead Details", "type": "main", "index": 0}],
        []
      ]
    },
    "Get Lead Details": {
      "main": [[{"node": "Prepare Context", "type": "main", "index": 0}]]
    },
    "Prepare Context": {
      "main": [[{"node": "Read Last Contact", "type": "main", "index": 0}]]
    },
    "Read Last Contact": {
      "main": [[{"node": "Check Last Contact", "type": "main", "index": 0}]]
    },
    "Check Last Contact": {
      "main": [[{"node": "Should Contact?", "type": "main", "index": 0}]]
    },
    "Should Contact?": {
      "main": [
        [{"node": "Load KB from Redis", "type": "main", "index": 0}],
        []
      ]
    },
    "Load KB from Redis": {
      "main": [[{"node": "Get KB Values", "type": "main", "index": 0}]]
    },
    "Get KB Values": {
      "main": [[{"node": "Prepare KB Context", "type": "main", "index": 0}]]
    },
    "Prepare KB Context": {
      "main": [[{"node": "Generate Message via OpenAI", "type": "main", "index": 0}]]
    },
    "Generate Message via OpenAI": {
      "main": [[{"node": "Extract Message", "type": "main", "index": 0}]]
    },
    "Extract Message": {
      "main": [[{"node": "Check if Telegram Available", "type": "main", "index": 0}]]
    },
    "Check if Telegram Available": {
      "main": [
        [{"node": "Send via Telegram Bot", "type": "main", "index": 0}],
        [{"node": "Create CRM Task", "type": "main", "index": 0}]
      ]
    },
    "Send via Telegram Bot": {
      "main": [[{"node": "Merge Results", "type": "main", "index": 0}]]
    },
    "Create CRM Task": {
      "main": [[{"node": "Merge Results", "type": "main", "index": 0}]]
    },
    "Merge Results": {
      "main": [[{"node": "Update Lead Status", "type": "main", "index": 0}]]
    },
    "Update Lead Status": {
      "main": [[{"node": "Save Contact Time", "type": "main", "index": 0}]]
    },
    "Error Trigger": {
      "main": [[{"node": "Log Error", "type": "main", "index": 0}]]
    },
    "Log Error": {
      "main": [[{"node": "Save Error to Redis", "type": "main", "index": 0}]]
    },
    "Save Error to Redis": {
      "main": [[{"node": "Notify Error", "type": "main", "index": 0}]]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "version": 2,
  "id": "wf-04-sales-nurture",
  "meta": {
    "templateCredsSetupCompleted": true,
    "description": "Sales nurturing workflow with LLM-powered messaging and rate limiting",
    "version": "0.0.2"
  },
  "tags": []
}